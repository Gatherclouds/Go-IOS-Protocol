// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/Go-IOS-Protocol/core (interfaces: BlockChain)

// Package core_mock is a generated GoMock package.
package core_mock

import (
"github.com/golang/mock/gomock"
)

// MockBlockChain is a mock of BlockChain interface
type MockBlockChain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockChainMockRecorder
}

// MockBlockChainMockRecorder is the mock recorder for MockBlockChain
type MockBlockChainMockRecorder struct {
	mock *MockBlockChain
}

// NewMockBlockChain creates a new mock instance
func NewMockBlockChain(ctrl *gomock.Controller) *MockBlockChain {
	mock := &MockBlockChain{ctrl: ctrl}
	mock.recorder = &MockBlockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockChain) EXPECT() *MockBlockChainMockRecorder {
	return m.recorder
}

// Iterator mocks base method
func (m *MockBlockChain) Iterator() core.BlockChainIterator {
	ret := m.ctrl.Call(m, "Iterator")
	ret0, _ := ret[0].(core.BlockChainIterator)
	return ret0
}

// Iterator indicates an expected call of Iterator
func (mr *MockBlockChainMockRecorder) Iterator() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockBlockChain)(nil).Iterator))
}

// Length mocks base method
func (m *MockBlockChain) Length() int {
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}