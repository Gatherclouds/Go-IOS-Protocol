// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/prototype/network (interfaces: Router)

// Package protocol_mock is a generated GoMock package.
package protocol_mock

import "github.com/golang/mock/gomock"

// MockRouter is a mock of Router interface
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method
func (m *MockRouter) Broadcast(arg0 message.Message) {
	m.ctrl.Call(m, "Broadcast", arg0)
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockRouterMockRecorder) Broadcast(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockRouter)(nil).Broadcast), arg0)
}


// CancelDownload mocks base method
func (m *MockRouter) CancelDownload(arg0, arg1 uint64) error {
	ret := m.ctrl.Call(m, "CancelDownload", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelDownload indicates an expected call of CancelDownload
func (mr *MockRouterMockRecorder) CancelDownload(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDownload", reflect.TypeOf((*MockRouter)(nil).CancelDownload), arg0, arg1)
}

// Download mocks base method
func (m *MockRouter) Download(arg0, arg1 uint64) error {
	ret := m.ctrl.Call(m, "Download", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}